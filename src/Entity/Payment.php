<?php
/**
 * @license   http://opensource.org/licenses/BSD-3-Clause BSD-3-Clause
 * @copyright Copyright (c) 2015 Julien Guittard (http://julienguittard.com)
 */

namespace Zoho\Subscriptions\Entity;

/**
 * Class Payment
 *
 * @package Zoho\Subscriptions\Entity
 */
class Payment implements EntityInterface
{
    /**
     * Unique ID of the payment generated by the server.
     *
     * @var string
     */
    protected $paymentId;

    /**
     * Mode through which payment is made.
     *
     * @var string
     */
    protected $paymentMode;

    /**
     * Amount paid in the respective payment.
     *
     * @var float
     */
    protected $amount;

    /**
     * Amount that is refund. Refunds are applicable only for payments whose
     * payment_mode is autotransaction. Refunds would be made to the respective card provided by the customer.
     *
     * @var float
     */
    protected $amountRefunded;

    /**
     * Date on which payment is made.
     *
     * @var string
     */
    protected $date;

    /**
     * Status of the payment. It can either be success or failure.
     *
     * @var string
     */
    protected $status;

    /**
     * Reference number generated for the payment. A string of your
     * choice can also be used as the reference number.
     *
     * @var string
     */
    protected $referenceNumber;

    /**
     * Description about the payment.
     *
     * @var string
     */
    protected $description;

    /**
     * Customer ID of the customer involved in the payment.
     *
     * @var string
     */
    protected $customerId;

    /**
     * Name of the customer to whom the invoice is raised.
     *
     * @var string
     */
    protected $customerMail;

    /**
     * Email address of the customer involved in the payment.
     *
     * @var string
     */
    protected $email;

    /**
     * If the payment mode is autotransaction, autotransaction information
     * will be displayed in the autotransaction object.
     *
     * @var Autotransaction
     */
    protected $autotransaction;

    /**
     * List of invoices associated with the payment.
     *
     * @var array
     */
    protected $invoices;

    /**
     * Currency code in which the payment is made.
     *
     * @var string
     */
    protected $currencyCode;

    /**
     * Customer’s currency symbol.
     *
     * @var string
     */
    protected $currencySymbol;

    /**
     * Exchange rate for the currency used in the invoices and customer’s currency.
     * The payment amount would be the multiplicative product of the original amount and the exchange rate.
     *
     * @var float
     */
    protected $exchangeRate;

    /**
     * Get the paymentId
     *
     * @return string
     */
    public function getPaymentId()
    {
        return $this->paymentId;
    }

    /**
     * Set the paymentId
     *
     * @param string $paymentId
     * @return Payment
     */
    public function setPaymentId($paymentId)
    {
        $this->paymentId = $paymentId;
        return $this;
    }

    /**
     * Get the paymentMode
     *
     * @return string
     */
    public function getPaymentMode()
    {
        return $this->paymentMode;
    }

    /**
     * Set the paymentMode
     *
     * @param string $paymentMode
     * @return Payment
     */
    public function setPaymentMode($paymentMode)
    {
        $this->paymentMode = $paymentMode;
        return $this;
    }

    /**
     * Get the amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * Set the amount
     *
     * @param float $amount
     * @return Payment
     */
    public function setAmount($amount)
    {
        $this->amount = $amount;
        return $this;
    }

    /**
     * Get the amountRefunded
     *
     * @return float
     */
    public function getAmountRefunded()
    {
        return $this->amountRefunded;
    }

    /**
     * Set the amountRefunded
     *
     * @param float $amountRefunded
     * @return Payment
     */
    public function setAmountRefunded($amountRefunded)
    {
        $this->amountRefunded = $amountRefunded;
        return $this;
    }

    /**
     * Get the date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->date;
    }

    /**
     * Set the date
     *
     * @param string $date
     * @return Payment
     */
    public function setDate($date)
    {
        $this->date = $date;
        return $this;
    }

    /**
     * Get the status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set the status
     *
     * @param string $status
     * @return Payment
     */
    public function setStatus($status)
    {
        $this->status = $status;
        return $this;
    }

    /**
     * Get the referenceNumber
     *
     * @return string
     */
    public function getReferenceNumber()
    {
        return $this->referenceNumber;
    }

    /**
     * Set the referenceNumber
     *
     * @param string $referenceNumber
     * @return Payment
     */
    public function setReferenceNumber($referenceNumber)
    {
        $this->referenceNumber = $referenceNumber;
        return $this;
    }

    /**
     * Get the description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set the description
     *
     * @param string $description
     * @return Payment
     */
    public function setDescription($description)
    {
        $this->description = $description;
        return $this;
    }

    /**
     * Get the customerId
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->customerId;
    }

    /**
     * Set the customerId
     *
     * @param string $customerId
     * @return Payment
     */
    public function setCustomerId($customerId)
    {
        $this->customerId = $customerId;
        return $this;
    }

    /**
     * Get the customerMail
     *
     * @return string
     */
    public function getCustomerMail()
    {
        return $this->customerMail;
    }

    /**
     * Set the customerMail
     *
     * @param string $customerMail
     * @return Payment
     */
    public function setCustomerMail($customerMail)
    {
        $this->customerMail = $customerMail;
        return $this;
    }

    /**
     * Get the email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set the email
     *
     * @param string $email
     * @return Payment
     */
    public function setEmail($email)
    {
        $this->email = $email;
        return $this;
    }

    /**
     * Get the autotransaction
     *
     * @return Autotransaction
     */
    public function getAutotransaction()
    {
        return $this->autotransaction;
    }

    /**
     * Set the autotransaction
     *
     * @param Autotransaction $autotransaction
     * @return Payment
     */
    public function setAutotransaction(Autotransaction $autotransaction)
    {
        $this->autotransaction = $autotransaction;
        return $this;
    }

    /**
     * Get the invoices
     *
     * @return array
     */
    public function getInvoices()
    {
        return $this->invoices;
    }

    /**
     * Set the invoices
     *
     * @param array $invoices
     * @return Payment
     */
    public function setInvoices(array $invoices)
    {
        $this->invoices = $invoices;
        return $this;
    }

    /**
     * Get the currencyCode
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->currencyCode;
    }

    /**
     * Set the currencyCode
     *
     * @param string $currencyCode
     * @return Payment
     */
    public function setCurrencyCode($currencyCode)
    {
        $this->currencyCode = $currencyCode;
        return $this;
    }

    /**
     * Get the currencySymbol
     *
     * @return string
     */
    public function getCurrencySymbol()
    {
        return $this->currencySymbol;
    }

    /**
     * Set the currencySymbol
     *
     * @param string $currencySymbol
     * @return Payment
     */
    public function setCurrencySymbol($currencySymbol)
    {
        $this->currencySymbol = $currencySymbol;
        return $this;
    }

    /**
     * Get the exchangeRate
     *
     * @return float
     */
    public function getExchangeRate()
    {
        return $this->exchangeRate;
    }

    /**
     * Set the exchangeRate
     *
     * @param float $exchangeRate
     * @return Payment
     */
    public function setExchangeRate($exchangeRate)
    {
        $this->exchangeRate = $exchangeRate;
        return $this;
    }

}
